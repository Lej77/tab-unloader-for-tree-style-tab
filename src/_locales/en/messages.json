{
    "extensionName": {
        "message": "TST Tab Unloader"
    },
    "options_extensionToggle_DisableButton": {
        "message": "Disable extension"
    },
    "options_extensionToggle_EnableButton": {
        "message": "Enable extension"
    },
    "options_extensionToggle_Status_Header": {
        "message": "Extension Status:"
    },
    "options_extensionToggle_Status_Enabled": {
        "message": "Enabled"
    },
    "options_extensionToggle_Status_Disabled": {
        "message": "Disabled"
    },
    "options_openInSeparateTab": {
        "message": "Open this options page in a separate tab"
    },
    "options_category_mouseEvents_Title": {
        "message": "Mouse Events (from Tree Style Tab)"
    },
    "options_category_mouseEvents_Explanation": {
        "message": "Each section in this area represents an action that can be taken in response to a mouse button being pressed while the mouse is over the Tree Style Tab sidebar. Inside each section are settings to configure what conditions must be met for an action to be taken. If not ALL of the enabled conditions are met then no action will be taken and Tree Style Tab will preform its default action. (A section's action is sometimes referred to as \"the operation\" inside the sections' settings.)"
    },
    "options_category_commands_Title": {
        "message": "Commands"
    },
    "options_category_permissions_Title": {
        "message": "Permissions"
    },
    "options_unloadOnLeftClick": {
        "message": "Left click tabs to unload them."
    },
    "options_unloadOnMiddleClick": {
        "message": "Middle click tabs to unload them. (Note that in Tree Style Tab v2.4.18 and earlier there is no way to prevent Tree Style Tab's default action. This means that If the mouse button is released on the tab it was pressed on then that tab will be closed. To use middle click to unload tabs in those versions of Tree Style Tab you need to press and hold the button and drag the mouse to another tab before releasing it.)"
    },
    "options_unloadOnRightClick": {
        "message": "Right click tabs to unload them. (Currently there is no way to stop the context menu from opening.)"
    },
    "options_unloadOnLeftClick_Title": {
        "message": "Left click to unload tabs"
    },
    "options_unloadOnMiddleClick_Title": {
        "message": "Middle click to unload tabs"
    },
    "options_unloadOnRightClick_Title": {
        "message": "Right click to unload tabs"
    },
    "options_selectOnLeftClick": {
        "message": "Prevent tab select on left click. If this operation succeeds then the tab clicked will not be selected."
    },
    "options_selectOnLeftClick_Title": {
        "message": "Prevent tab select on left click"
    },
    "options_closeOnMiddleClick": {
        "message": "Prevent tab close on middle click. If this operation succeeds then the tab clicked will not be closed. (Note that in Tree Style Tab v2.4.18 and earlier this is not possible.)"
    },
    "options_closeOnMiddleClick_Title": {
        "message": "Prevent tab close on middle click"
    },
    "options_modifierKeysInfo": {
        "message": "The click will only register if the selected modifier keys are pressed and the unselected modifier keys are released."
    },
    "options_modifierKeysAnyMode": {
        "message": "Any Key Mode: If checked then at least one of the selected modifier keys must be pressed for a click to register. It is not necessary to press all of the selected modifier keys. The state of the unselected modifier keys are ignored. If there are no selected modifier keys then a click will always register."
    },
    "options_modifierKey_Ctrl": {
        "message": "Ctrl"
    },
    "options_modifierKey_Shift": {
        "message": "Shift"
    },
    "options_modifierKey_Alt": {
        "message": "Alt"
    },
    "options_modifierKey_Meta": {
        "message": "Meta (Command on macOS)"
    },
    "options_clickTimeoutInfo": {
        "message": "Measure the click duration. That is the time between a mouse down and a mouse up event. Ensure that it is within a certain interval. Set a minimum time to only register long presses or set a maximum time to prevent triggering when dragging or long-pressing tabs."
    },
    "options_clickTimeoutMin": {
        "message": "Minimum click duration in milliseconds (set to 0 to disable): "
    },
    "options_clickTimeoutMax": {
        "message": "Maximum click duration in milliseconds (set to 0 to disable): "
    },
    "options_doubleClick_enabled": {
        "message": "Wait for double click."
    },
    "options_doubleClick_only": {
        "message": "If checked only double clicks will register; otherwise double clicks will cancel the operation."
    },
    "options_doubleClick_timeout": {
        "message": "Time in milliseconds between mouse down events to count as a double click: "
    },
    "options_onDrag_enabled": {
        "message": "Wait for long press without drag and drop. This is a special notification sent by Tree Style Tab when a tab is long pressed with the left mouse button. The notification is not sent if the tab is dragged. This can be used to allow the operation with long press but cancel when using drag and drop with tabs."
    },
    "options_onDrag_cancel": {
        "message": "Invert the check. If this is checked then the tab must NOT be long pressed in order for this condition to be met, so it can be clicked on quickly or it can be dragged and dropped. (If the \"also register mouse up events\" checkbox is checked then \"clicked on quickly\" is no longer an option and so this means that a drag and drop operation must be started for the clicked tab in order for the condition to be met.)"
    },
    "options_onDrag_mouseUpTigger": {
        "message": "If checked then mouse up events will also register as long-press events. Currently Tree Style Tab doesn't send mouse up events after drag and drop operations so if a mouse up event is sent then drag and drop wasn't used. In other words this option changes the check from \"long press tabs\" to \"any click that doesn't start a drag and drop operation\" (as long as Tree Style Tab doesn't change its strange behavior around this)."
    },
    "options_onDrag_timeout": {
        "message": "Time in milliseconds to wait for long press (in legacy mode we should be notified after 400 milliseconds if the tab isn't dragged so keep it slightly above that) (in modern mode this should be how long we want to wait before preventing/ignoring drag and drop): "
    },
    "options_onDrag_Modern": {
        "message": "Tree Style Tab's drag API was changed and is slightly different in Tree Style Tab v2.7.8 and later then it was previously. Check this setting if you are using a more modern Tree Style Tab version. (The more modern API has a new event type that is sent when a drag and drop operation is started in the sidebar. So instead of waiting for a \"long press\" event before a timeout we instead wait for a \"drag and drop\" event before a timeout.) (This doesn't change the behavior of the settings above this one, instead it only decreases the risk of race conditions if the timeout is too low and allows delaying the start of a drag and drop operations for longer than the default 400ms.)"
    },
    "options_onDrag_Modern_PreventDragAndDrop": {
        "message": "The more modern drag API doesn't switch into the special \"long press\" mode automatically, instead it requires that we send a message to Tree Style Tab when we want to do so. Check this setting to send such a message after the timeout has expired. This will mimic how Tree Style Tab used to work and prevent drag and drop operations from being started after a certain time (specified by the timeout)."
    },
    "options_dontPreventTSTAction": {
        "message": "Don't prevent Tree Style Tab's default action."
    },
    "options_applyToAll": {
        "message": "Apply to both unloaded and loaded tabs."
    },
    "options_applyToUnloadedTabs": {
        "message": "Register click on unloaded tabs instead of loaded tabs."
    },
    "options_useSelectedTabs": {
        "message": "Unload selected tabs: if multiple tabs are selected then unload all of them."
    },
    "options_unloadOthers_ignoreSelectedTabs": {
        "message": "Ignore selected tabs: if multiple tabs are selected then none of them will be unloaded. If this is unchecked then all tabs except the current tab will be unloaded even if multiple tabs are selected."
    },
    "options_unloadOthers_ignorePinnedTabs": {
        "message": "Ignore pinned tabs: don't unload any tabs that are pinned."
    },
    "options_fallbackToLastSelected": {
        "message": "Select last focused: If tab is active then select the last focused tab. If this is not checked then the closest tab is selected."
    },
    "options_ignoreHiddenTabs": {
        "message": "Ignore hidden tabs: if tab is active then the tab that is selected instead must not be hidden."
    },
    "options_select_IgnoreHiddenTabs": {
        "message": "Ignore hidden tabs: the tab that is selected must not be hidden."
    },
    "options_wrapAround": {
        "message": "Wrap around when selecting: when searching for a new tab to select the search will wrap around from the start to the end or from the end to the start of the tab list."
    },
    "options_applyToTstTree": {
        "message": "Unload Tree: if the tab that should be unloaded has child tabs then those will be unloaded as well."
    },
    "options_notRootTab": {
        "message": "Don't unload the root tab, instead unload only child tabs."
    },
    "options_notActiveTab": {
        "message": "Ignore active tab: never unload the tab that is currently active."
    },
    "options_unloadTreeDescendants_unloadRootTabIf_NoDescendants": {
        "message": "Unload root tab if there are no descendants."
    },
    "options_unloadTreeDescendants_unloadRootTabIf_UnloadedDescendants": {
        "message": "Unload root tab if all descendants are already unloaded."
    },
    "options_contextMenuItems_Title": {
        "message": "Context menu items"
    },
    "options_contextMenu_in_tab_bar": {
        "message": "Show context menu items in Firefox's tab bar. (Required in Firefox 64 and later.)"
    },
    "options_tstContextMenu_CustomRootLabel": {
        "message": "If there are more than one context menu item they will be gathered under an item with this name (place a \"&\" symbol before the letter that should be used as the keyboard shortcut) (empty to use default label):"
    },
    "options_unloadInTSTContextMenu_Title": {
        "message": "Unload tab"
    },
    "options_unloadTreeInTSTContextMenu_Title": {
        "message": "Unload tree"
    },
    "options_unloadTreeDescendantsInTSTContextMenu_Title": {
        "message": "Unload descendants"
    },
    "options_unloadOtherInTSTContextMenu_Title": {
        "message": "Unload other tabs"
    },
    "options_unloadInTSTContextMenu": {
        "message": "Add a context menu item in Tree Style Tab's context menu to unload a tab."
    },
    "options_unloadTreeInTSTContextMenu": {
        "message": "Add a context menu item in Tree Style Tab's context menu to unload a tab tree."
    },
    "options_unloadTreeDescendantsInTSTContextMenu": {
        "message": "Add a context menu item in Tree Style Tab's context menu to unload the descendants of a tab (that is to say all tabs that are nested under the targeted tab as specified by Tree Style Tab's tree structure)."
    },
    "options_unloadOtherInTSTContextMenu": {
        "message": "Add a context menu item in Tree Style Tab's context menu to unload all tabs except the currently selected ones."
    },
    "options_contextMenu_customLabel": {
        "message": "Custom context menu item label (place a \"&\" symbol before the letter that should be used as the keyboard shortcut) (empty to use default label):"
    },
    "options_unloadInTSTContextMenu_DelayedRegistration": {
        "message": "Re-register context menu items to Tree Style Tab after a delay to ensure that they are placed at the end of the context menu. Delay in milliseconds (0 to disable): "
    },
    "options_dimUnloadedTabs": {
        "message": "Dim unloaded tabs in Tree Style Tab's sidebar."
    },
    "options_disableOptionsPageAnimations": {
        "message": "Disable animations on options page."
    },
    "options_disableOptionsPageDarkTheme": {
        "message": "Disable dark theme support on options page."
    },
    "options_TabHide_Header": {
        "message": "Tab Hiding"
    },
    "options_TabHide_HideUnloadedTabs": {
        "message": "Hide unloaded tabs with the tab hiding API. Hidden tabs will not be shown in the toolbar and can't be selected with keyboard shortcuts. When the current tab is closed hidden tabs will not be selected as long as there are other visible tabs. Pinned tabs can't be hidden."
    },
    "options_TabHide_SuppressTSTHiddenClass": {
        "message": "Suppress special behavior in Tree Style Tab regarding hidden tabs. (This can easily cause issues for Tree Style Tab so should probably be avoided if possible.)"
    },
    "options_TabHide_ShowHiddenTabsInTST": {
        "message": "Show hidden tabs in Tree Style Tab's sidebar."
    },
    "options_TabHide_ShowHiddenTabsInTST_MoreInfo": {
        "message": "This setting worked somewhat well for older Tree Style Tab versions but for more modern versions you need to check \"Unlock Expert Options\" in Tree Style Tab's option page and then check the \"Show hidden tabs which are hidden by other extensions\" option (which sets the \"renderHiddenTabs\" config) inside the \"Appearance\" section."
    },
    "options_TabHide_Info": {
        "message": "If this options is enabled then it makes sense to uncheck all the \"$ignoreHiddenTabsOption$\" checkboxes.\n\nTo still be able to select unloaded tabs you can use the \"$showHiddenTabsInTSTOption$\" option.\n\nNote: requires the \"tabHide\" permission. Also this feature is experimental and might not work correctly.",
        "placeholders": {
            "ignoreHiddenTabsOption": {
                "content": "$1"
            },
            "showHiddenTabsInTSTOption": {
                "content": "$2"
            }
        }
    },
    "options_TabRestoreFix_Header": {
        "message": "Fix for failed tab restore (Firefox 61 and earlier)"
    },
    "options_TabRestoreFix_reloadBrokenTabs": {
        "message": "When a tab is unloaded with the WebExtensions API it can sometimes be put in a \"broken\" state. A \"broken\" tab can't be re-opened if it is closed (not even with session restore at startup) and when its loaded again it will lose its URL. This option will reload (actually re-setting the tab's URL) \"broken\" tabs and then unload them again. \"Broken\" tabs might need to be reloaded many times before they are fixed. (Compatible with other tab unloaders.)"
    },
    "options_TabRestoreFix_reloadBrokenTabs_Normal": {
        "message": "Reload \"broken\" tabs in normal windows."
    },
    "options_TabRestoreFix_reloadBrokenTabs_Private": {
        "message": "Reload \"broken\" tabs in private windows."
    },
    "options_TabRestoreFix_reloadBrokenTabs_QuickUnload": {
        "message": "It is possible to load an unloaded tab and then quickly unload it again without it showing a loading icon when it is unloaded. This can be used to quickly and efficiently determine if a tab is \"broken\". Unfortunately using the trick causes the extension API to incorrectly report the tab's URL as the default URL \"about:blank\". This means that some extensions might not work as expected when handling these \"quick\" unloaded tabs. The issue will disappear as soon as the tab is loaded again."
    },
    "options_TabRestoreFix_reloadBrokenTabs_QuickUnload_Normal": {
        "message": "Allow \"quick unload\" to test for \"broken\" tabs in normal windows."
    },
    "options_TabRestoreFix_reloadBrokenTabs_QuickUnload_Private": {
        "message": "Allow \"quick unload\" to test for \"broken\" tabs in private windows."
    },
    "options_TabRestoreFix_waitForUrlInMilliseconds": {
        "message": "Sometimes a tab that has been unloaded isn't restored correctly. Time to wait for a tab to load before fixing it (compatible with other tab unloaders) (time in milliseconds) (-1 to disable):"
    },
    "options_TabRestoreFix_waitForIncorrectLoad": {
        "message": "Sometimes Firefox can mark a tab as loaded even though it isn't. When this happens it first marks the tab as unloaded and then immediately after marks it as loaded. This option makes it so that if the tab is marked as unloaded and then as loaded within the time specified here then that tab will be fixed when it is activated instead. Time to wait for incorrect load (time in milliseconds) (-1 to disable):"
    },
    "options_TabRestoreFix_fixIncorrectLoadAfter": {
        "message": "If the tab is incorrectly marked as loaded by Firefox then unload it again after a delay to mark it as unloaded (time in milliseconds) (-1 to disable):"
    },
    "options_TabRestoreFix_permissionWarning": {
        "message": "Note: the above features requires the \"tabs\" permission. (Can work partially without the permission if Tree Style Tab is installed.)"
    },
    "options_TabRestoreFix_deprecatedWarning": {
        "message": "This section is a workaround for a Firefox bug that was fixed in Firefox 62."
    },
    "options_TreeStyleTabStyle_Header": {
        "message": "Custom Tree Style Tab Style"
    },
    "options_TreeStyleTabStyle_Info": {
        "message": "This is the style changes made to Tree Style Tab's sidebar by this extension:"
    },
    "options_OptionalPermissions_Header": {
        "message": "Optional Permissions"
    },
    "options_OtherSettings_Header": {
        "message": "Other Settings"
    },
    "options_ResetSettings_Button": {
        "message": "Reset Settings"
    },
    "options_ResetSettings_Prompt": {
        "message": "Do you want to reset all settings to default values?"
    },
    "options_Commands_Title": {
        "message": "Keyboard shortcuts"
    },
    "options_Commands_Info": {
        "message": "Select one of the text inputs below and then make a keyboard combination such as \"Alt+X\" to bind the keyboard shortcut to the selected text box. You can also press the \"Prompt\" button and manually write down a keyboard shortcut if you prefer. (Keyboard shortcuts require Firefox 60 or later)"
    },
    "options_Commands_ResetButton": {
        "message": "Reset"
    },
    "options_Commands_PromptButton": {
        "message": "Prompt"
    },
    "options_Commands_PromptButton_Description": {
        "message": "Write text representing a keyboard shortcut. For example \"Alt+X\""
    },
    "options_Commands_UnloadTab": {
        "message": "Unload tab"
    },
    "options_Commands_UnloadTree": {
        "message": "Unload tree"
    },
    "options_Commands_UnloadTreeDescendants": {
        "message": "Unload tree descendants"
    },
    "options_Commands_UnloadOther": {
        "message": "Unload other tabs"
    },
    "options_Commands_SelectPreviousTab": {
        "message": "Select previous loaded tab"
    },
    "options_Commands_SelectNextTab": {
        "message": "Select next loaded tab"
    },
    "options_Commands_ToggleTabHideSetting": {
        "message": "Toggle hiding of unloaded tabs"
    },
    "options_Commands_ToggleTabHideSetting_Description": {
        "message": "Toggles the setting for the feature in the \"$tabHideHeader$\" section that hides unloaded tabs.",
        "placeholders": {
            "tabHideHeader": {
                "content": "$1",
                "example": "Tab Hiding"
            }
        }
    },
    "optionalPermissions_Request": {
        "message": "Request"
    },
    "optionalPermissions_Remove": {
        "message": "Remove"
    },
    "optionalPermissions_Available": {
        "message": "Granted:"
    },
    "optionalPermissions_Granted": {
        "message": "True"
    },
    "optionalPermissions_NotGranted": {
        "message": "False"
    },
    "optionalPermissions_TabHide_Title": {
        "message": "\"tabHide\""
    },
    "optionalPermissions_TabHide_Explanation": {
        "message": "The \"tabHide\" permission is needed to hide tabs with the tab hiding API.\n\nThis is an experimental API in Firefox 59 and 60. To enable it in Firefox 59 or 60, visit the \"about:config\" URL and set \"extensions.webextensions.tabhide.enabled\" to true.\n\nIf the API is not enabled then it can't be used even if the permission is granted."
    },
    "optionalPermissions_TabHide_APIEnabled_Header": {
        "message": "API Status:"
    },
    "optionalPermissions_TabHide_APIEnabled_Enabled": {
        "message": "Available"
    },
    "optionalPermissions_TabHide_APIEnabled_Disabled": {
        "message": "Unavailable"
    },
    "optionalPermissions_TabHide_APIEnabled_Error": {
        "message": "Permission denied"
    },
    "optionalPermissions_TabHide_APIEnabled_Check": {
        "message": "Check API Status"
    },
    "optionalPermissions_Tabs_Title": {
        "message": "\"tabs\""
    },
    "optionalPermissions_Tabs_Explanation": {
        "message": "The \"tabs\" permission is needed to access a tab's title or URL. \n\nThis is needed to fix tabs that don't restore correctly since they need to have their URL set again."
    },
    "options_warnAboutMisconfiguredPrivacySettings": {
        "message": "Open a popup window with a warning when misconfigured privacy permissions are detected. (When one of the below permissions is granted while the other isn't.)"
    },
    "privacyPermissions_Header": {
        "message": "Access to private windows"
    },
    "privacyPermissions_Info": {
        "message": "For this extension to work with private windows it is not enough to just grant it permission from Firefox. Instead you must also change the settings for Tree Style Tab so that it allows this extension to control and get notified about private windows via its APIs. To do this open up Tree Style Tab's option page and expand the \"Extra Features via Other Addons\" section. Inside it you must enabled the checkbox to \"Notify Messages from Private Windows\" for \"Tab Unloader for Tree Style Tab\"."
    },
    "privacyPermissions_hasPrivacyPermission_Header": {
        "message": "Has privacy permission:"
    },
    "privacyPermissions_hasPrivacyPermission_Error": {
        "message": "Waiting for a private window to be opened"
    },
    "privacyPermissions_hasTreeStyleTabPrivacyPermission_Header": {
        "message": "Tree Style Tab is allowed to send messages for private windows:"
    },
    "privacyPermissions_hasTreeStyleTabPrivacyPermission_Error": {
        "message": "Not registered with Tree Style Tab yet"
    },
    "permissionsPage_Title": {
        "message": "Permissions"
    },
    "permissionsPage_Info_Start": {
        "message": "Due to a "
    },
    "permissionsPage_Info_Bug": {
        "message": "Firefox bug"
    },
    "permissionsPage_Info_End": {
        "message": " it is currently not possible to request optional permission from the options page. As a workaround request permissions from this page instead."
    },
    "privatePermissionPage_Title": {
        "message": "Misconfigured Permissions for Private Windows - Tab Unloader for Tree Style Tab"
    },
    "privatePermissionPage_Info": {
        "message": "The addon \"Tab Unloader for Tree Style Tab\" detected that you might want to give it access to private windows but privacy permissions were not configured correctly. To do this correctly you need to grant the extension access to private windows and also change the options for \"Tree Style Tab\" so that it sends notifications for private windows."
    },
    "contextMenu_unloadTab": {
        "message": "Unload Tab(s)",
        "description": "The title of the Tree Style Tab context menu item. The '&' is placed before the character that will become the keyboard shortcut."
    },
    "contextMenu_unloadTree": {
        "message": "Unload Tree",
        "description": "The title of the Tree Style Tab context menu item. The '&' is placed before the character that will become the keyboard shortcut."
    },
    "contextMenu_unloadTreeDescendants": {
        "message": "Unload Descendants",
        "description": "The title of the Tree Style Tab context menu item. The '&' is placed before the character that will become the keyboard shortcut."
    },
    "contextMenu_unloadOther": {
        "message": "Unload Other Tab(s)",
        "description": "The title of the Tree Style Tab context menu item. The '&' is placed before the character that will become the keyboard shortcut."
    },
    "contextMenu_rootItemTitle": {
        "message": "Tab Unloader"
    },
    "treeStyleTabStyle_dimUnloadedTabs": {
        "message": "Dim unloaded tabs"
    },
    "treeStyleTabStyle_showHiddenTabs": {
        "message": "Show hidden tabs"
    },
    "html-options_TabRestoreFix_unloadAgainAfterDelay": {
        "message": "When unloading tabs use the unload method again after a slight delay (this fixes an issue where sometimes when unloading a tab it fails to be marked as unloaded, see <a href=\"https://github.com/Lej77/tab-unloader-for-tree-style-tab/issues/3#issuecomment-391998967\">issue 3</a> for more info) (time in milliseconds) (-1 to disable):"
    },
    "html-options_unloadViaAutoTabDiscard": {
        "message": "Unload tabs via the <a href=\"https://addons.mozilla.org/firefox/addon/auto-tab-discard/\">Auto Tab Discard</a> extension. (This can allow for more advanced features such as dimming the favicon of unloaded tabs.) (See <a href=\"https://github.com/Lej77/tab-unloader-for-tree-style-tab/issues/13\">issue 13</a> on this extension's issue tracker for more info.)"
    }
}