{
    "options_extensionToggle_DisableButton": {
        "message": "Disable extension"
    },
    "options_extensionToggle_EnableButton": {
        "message": "Enable extension"
    },
    "options_extensionToggle_Status_Header": {
        "message": "Extension Status:"
    },
    "options_extensionToggle_Status_Enabled": {
        "message": "Enabled"
    },
    "options_extensionToggle_Status_Disabled": {
        "message": "Disabled"
    },
    "options_unloadOnLeftClick": {
        "message": "Left click tabs to unload them."
    },
    "options_unloadOnMiddleClick": {
        "message": "Middle click tabs to unload them. (Note that in Tree Style Tab v2.4.18 and earlier there is no way to prevent Tree Style Tab's default action. This means that If the mouse button is released on the tab it was pressed on then that tab will be closed. To use middle click to unload tabs in those versions of Tree Stlye Tab you need to press and hold the button and drag the mouse to another tab before releasing it.)"
    },
    "options_unloadOnRightClick": {
        "message": "Right click tabs to unload them. (Currently there is no way to stop the context menu from opening.)"
    },
    "options_unloadOnLeftClick_Title": {
        "message": "Left click to unload tabs"
    },
    "options_unloadOnMiddleClick_Title": {
        "message": "Middle click to unload tabs"
    },
    "options_unloadOnRightClick_Title": {
        "message": "Right click to unload tabs"
    },
    "options_selectOnLeftClick": {
        "message": "Prevent tab select on left click. If this operation succeeds then the tab clicked will not be selected."
    },
    "options_selectOnLeftClick_Title": {
        "message": "Prevent tab select on left click"
    },
    "options_closeOnMiddleClick": {
        "message": "Prevent tab close on middle click. If this operation succeeds then the tab clicked will not be closed. (Note that in Tree Style Tab v2.4.18 and earlier this is not possible.)"
    },
    "options_closeOnMiddleClick_Title": {
        "message": "Prevent tab close on middle click"
    },
    "options_modifierKeysInfo": {
        "message": "The click will only register if the selected modifier keys are pressed and the unselected modifier keys are released."
    },
    "options_modifierKeysAnyMode": {
        "message": "Any Key Mode: If checked then at least one of the selected modifier keys must be pressed for a click to register. It is not necessary to press all of the selected modifier keys. The state of the unselected modifier keys are ignored. If there are no selected modifier keys then a click will allways register."
    },
    "options_modifierKey_Ctrl": {
        "message": "Ctrl"
    },
    "options_modifierKey_Shift": {
        "message": "Shift"
    },
    "options_modifierKey_Alt": {
        "message": "Alt"
    },
    "options_modifierKey_Meta": {
        "message": "Meta (Command on macOS)"
    },
    "options_clickTimeoutInfo": {
        "message": "Measure the click duration. That is the time between a mouse down and a mouse up event. Ensure that it is within a certain intervall. Set a minimum time to only register long presses or set a maximum time to prevent triggering when dragging or long-pressing tabs."
    },
    "options_clickTimeoutMin": {
        "message": "Minimum click duration in milliseconds (set to 0 to disable): "
    },
    "options_clickTimeoutMax": {
        "message": "Maximum click duration in milliseconds (set to 0 to disable): "
    },
    "options_doubleClick_enabled": {
        "message": "Wait for double click."
    },
    "options_doubleClick_only": {
        "message": "If checked only double clicks will register; otherwise double clicks will cancel the operation."
    },
    "options_doubleClick_timeout": {
        "message": "Time in milliseconds between mouse down events to count as a double click: "
    },
    "options_onDrag_enabled": {
        "message": "Wait for long press without drag and drop. This is a special notification sent by Tree Style Tab when a tab is long pressed with the left mouse button. The notification is not sent if the tab is dragged. This can be used to allow the operation with long press but cancel when using drag and drop with tabs."
    },
    "options_onDrag_cancel": {
        "message": "If checked then cancel if an event is registered; otherwise only allow if an event is registered."
    },
    "options_onDrag_mouseUpTigger": {
        "message": "If checked then mouse up events will also register as long-press events. Currently Tree Style Tab doesn't send mouse up events after drag and drop operations so if a mouse up event is sent then drag and drop wasn't used. This means that if this is checked then an event will be register if drag and drop is NOT used."
    },
    "options_onDrag_timeout": {
        "message": "Time in milliseconds to wait for long press (should be notified after 400 milliseconds if the tab isn't dragged): "
    },
    "options_dontPreventTSTAction": {
        "message": "Don't prevent Tree Style Tab's default action."
    },
    "options_applyToAll": {
        "message": "Apply to both unloaded and loaded tabs."
    },
    "options_applyToUnloadedTabs": {
        "message": "Register click on unloaded tabs instead of loaded tabs."
    },
    "options_fallbackToLastSelected": {
        "message": "Select last focused: If tab is active then select the last focused tab. If this is not checked then the closest tab is selected."
    },
    "options_ignoreHiddenTabs": {
        "message": "Ignore hidden tabs: if tab is active then the tab that is selected instead must not be hidden."
    },
    "options_contextMenuItems_Title": {
        "message": "Context menu items"
    },
    "options_tstContextMenu_CustomRootLabel": {
        "message": "If there are more than one context menu item they will be gathered under an item with this name (place a \"&\" symbol before the letter that should be used as the keyboard shortcut) (empty to use default label):"
    },
    "options_unloadInTSTContextMenu_Title": {
        "message": "Unload tab"
    },
    "options_unloadTreeInTSTContextMenu_Title": {
        "message": "Unload tree"
    },
    "options_unloadInTSTContextMenu": {
        "message": "Add a context menu item in Tree Style Tab's context menu to unload a tab."
    },
    "options_unloadTreeInTSTContextMenu": {
        "message": "Add a context menu item in Tree Style Tab's context menu to unload a tab tree."
    },
    "options_contextMenu_customLabel": {
        "message": "Custom context menu item label (place a \"&\" symbol before the letter that should be used as the keyboard shortcut) (empty to use default label):"
    },
    "options_unloadInTSTContextMenu_DelayedRegistration": {
        "message": "Re-register context menu items to Tree Style Tab after a delay to ensure that they are placed at the end of the context menu. Delay in milliseconds (0 to disable): "
    },
    "options_dimUnloadedTabs": {
        "message": "Dim unloaded tabs in Tree Style Tab's sidebar."
    },
    "options_disableOptionsPageAnimations": {
        "message": "Disable animations on options page."
    },
    "options_TabHide_Header": {
        "message": "Tab Hiding"
    },
    "options_TabHide_HideUnloadedTabs": {
        "message": "Hide unloaded tabs with the tab hiding API. Hidden tabs will not be shown in the toolbar and can't be selected with keyboard shortcuts. When the current tab is closed hidden tabs will not be selected as long as there are other visible tabs. Pinned tabs can't be hidden."
    },
    "options_TabHide_ShowHiddenTabsInTST": {
        "message": "Show hidden tabs in Tree Style Tab's sidebar."
    },
    "options_TabHide_Info": {
        "message": "If this options is enabled then it makes sense to uncheck all the \"$ignoreHiddenTabsOption$\" checkboxes.\n\nTo still be able to select unloaded tabs you can use the \"$showHiddenTabsInTSTOption$\" option.\n\nNote: requires the \"tabHide\" permission.",
        "placeholders": {
            "ignoreHiddenTabsOption": {
                "content": "$1"
            },
            "showHiddenTabsInTSTOption": {
                "content": "$2"
            }
        }
    },
    "options_TabRestoreFix_Header": {
        "message": "Fix for failed tab restore"
    },
    "options_TabRestoreFix_reloadBrokenTabs": {
        "message": "When a tab is unloaded with the WebExtensions API it can sometimes be put in a \"broken\" state. A \"broken\" tab can't be re-opened if it is closed (not even with session restore at startup) and when its loaded again it will lose its URL. This option will reload (actually re-setting the tab's URL) \"broken\" tabs and then unload them again. \"Broken\" tabs might need to be reloaded many times before they are fixed. (Compatible with other tab unloaders.)"
    },
    "options_TabRestoreFix_waitForUrlInMilliseconds": {
        "message": "Sometimes a tab that has been unloaded isn't restored correctly. Time to wait for a tab to load before fixing it (compatible with other tab unloaders) (time in milliseconds) (-1 to disable):"
    },
    "options_TabRestoreFix_waitForIncorrectLoad": {
        "message": "Sometimes Firefox can mark a tab as loaded even though it isn't. When this happens it first marks the tab as unloaded and then immediately after marks it as loaded. This option makes it so that if the tab is marked as unloaded and then as loaded within the time specified here then that tab will be fixed when it is activated instead. Time to wait for incorrect load (time in milliseconds) (-1 to disable):"
    },
    "options_TabRestoreFix_fixIncorrectLoadAfter": {
        "message": "If the tab is incorrectly marked as loaded by Firefox then unload it again after a delay to mark it as unloaded (time in milliseconds) (-1 to disable):"
    },
    "options_TabRestoreFix_permissionWarning": {
        "message": "Note: requires the \"tabs\" permission. (Can work partially without the permission if Tree Style Tab is installed.)"
    },
    "options_TreeStyleTabStyle_Header": {
        "message": "Custom Tree Style Tab Style"
    },
    "options_TreeStyleTabStyle_Info": {
        "message": "This is the style changes made to Tree Style Tab's sidebar by this extension:"
    },
    "options_unloadAgainAfterDelay": {
        "message": "When unloading tabs use the unload method again after a slight delay (time in milliseconds) (-1 to disable):"
    },
    "options_unloadViaAutoTabDiscard_Prefix": {
        "message": "Unload tabs via the "
    },
    "options_unloadViaAutoTabDiscard_Name": {
        "message": "Auto Tab Discard"
    },
    "options_unloadViaAutoTabDiscard_URL": {
        "message": "https://addons.mozilla.org/firefox/addon/auto-tab-discard/"
    },
    "options_unloadViaAutoTabDiscard_Suffix": {
        "message": " extension."
    },
    "options_OptionalPermissions_Header": {
        "message": "Optional Permissions"
    },
    "options_OtherSettings_Header": {
        "message": "Other Settings"
    },
    "options_ResetSettings_Button": {
        "message": "Reset Settings"
    },
    "options_ResetSettings_Prompt": {
        "message": "Do you want to reset all settings to default values?"
    },
    "options_Commands_Title": {
        "message": "Keyboard shortcuts"
    },
    "options_Commands_Info": {
        "message": "Select one of the text inputs bellow and then make a keyboard combination such as \"Alt+X\" to bind the keyboard shortcut to the selected text box. You can also press the \"Prompt\" button and manually write down a keyboard shortcut if you prefer. (Keyboard shortcuts require Firefox 60 or later)"
    },
    "options_Commands_ResetButton": {
        "message": "Reset"
    },
    "options_Commands_PromptButton": {
        "message": "Prompt"
    },
    "options_Commands_PromptButton_Description": {
        "message": "Write text representing a keyboard shortcut. For example \"Alt+X\""
    },
    "options_Commands_UnloadTab": {
        "message": "Unload tab"
    },
    "options_Commands_UnloadTree": {
        "message": "Unload tree"
    },
    "optionalPermissions_Request": {
        "message": "Request"
    },
    "optionalPermissions_Remove": {
        "message": "Remove"
    },
    "optionalPermissions_Available": {
        "message": "Granted:"
    },
    "optionalPermissions_Granted": {
        "message": "True"
    },
    "optionalPermissions_NotGranted": {
        "message": "False"
    },
    "optionalPermissions_TabHide_Title": {
        "message": "\"tabHide\""
    },
    "optionalPermissions_TabHide_Explanation": {
        "message": "The \"tabHide\" permission is needed to hide tabs with the tab hiding API.\n\nThis is currently an experimental API and it is disabled by default. To enable it, visit the \"about:config\" URL and set \"extensions.webextensions.tabhide.enabled\" to true.\n\nIf the API is not enabled then it can't be used even if the permission is granted."
    },
    "optionalPermissions_TabHide_APIEnabled_Header": {
        "message": "API Status:"
    },
    "optionalPermissions_TabHide_APIEnabled_Enabled": {
        "message": "Available"
    },
    "optionalPermissions_TabHide_APIEnabled_Disabled": {
        "message": "Unavailable"
    },
    "optionalPermissions_TabHide_APIEnabled_Error": {
        "message": "Permission denied"
    },
    "optionalPermissions_TabHide_APIEnabled_Check": {
        "message": "Check API Status"
    },
    "optionalPermissions_Tabs_Title": {
        "message": "\"tabs\""
    },
    "optionalPermissions_Tabs_Explanation": {
        "message": "The \"tabs\" permission is needed to access a tab's title or URL. \n\nThis is needed to fix tabs that don't restore correctly since they need to have their URL set again."
    },
    "permissionsPage_Title": {
        "message": "Permissions"
    },
    "permissionsPage_Info_Start": {
        "message": "Due to a "
    },
    "permissionsPage_Info_Bug": {
        "message": "Firefox bug"
    },
    "permissionsPage_Info_End": {
        "message": " it is currently not possible to request optional permission from the options page. As a workaround request permissions from this page instead."
    },
    "contextMenu_unloadTab": {
        "message": "&Suspend Tab",
        "description": "The title of the Tree Style Tab context menu item. The '&' is placed before the character that will become the keyboard shortcut."
    },
    "contextMenu_unloadTree": {
        "message": "Susp&end Tree",
        "description": "The title of the Tree Style Tab context menu item. The '&' is placed before the character that will become the keyboard shortcut."
    },
    "contextMenu_rootItemTitle": {
        "message": "Tab Unloader"
    },
    "treeStyleTabStyle_dimUnloadedTabs": {
        "message": "Dim unloaded tabs"
    },
    "treeStyleTabStyle_showHiddenTabs": {
        "message": "Show hidden tabs"
    }
}